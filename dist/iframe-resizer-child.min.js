window.IFrameResizer={onReady:null,create:(options={})=>{const IFrameResizerInstance=new IFrameResizer(options);if(typeof window.IFrameResizer.onReady==="function"){window.IFrameResizer.onReady(IFrameResizerInstance)}return IFrameResizerInstance}};class IFrameResizer{static instance=null;constructor(options={}){if(!IFrameResizer.hasParent()){console.error(`[LOG][IFRAME CHILD][${window.location.host}]: Not running inside an iFrame. Initialization aborted.`);return}else{console.log(`[LOG][IFRAME CHILD][${window.location.host}]: Running inside an iFrame.`)}if(IFrameResizer.instance!==null){IFrameResizer.instance.destroy()}IFrameResizer.instance=this;this.lastHeight=null;this.lastWidth=null;const defaultOptions={targetOrigin:"*",resize:true,scroll:true,log:false,initData:{}};this.options={...defaultOptions,...options};this.observer=null;this.customMessageHandlers=new Map;this.handleMessage=this.handleMessage.bind(this);window.addEventListener("message",this.handleMessage);this.log("Initializing",this.options);if(this.options.resize){this.initResizeListener()}if(this.options.scroll){this.initScrollListener()}this.sendMessage("init",this.options.initData)}initResizeListener(){this.onResize=this.onResize.bind(this);const resizeObserverCallback=entries=>{for(const entry of entries){if(entry.target===document.body){this.onResize()}}};this.observer=new ResizeObserver(resizeObserverCallback);this.observer.observe(document.body)}initScrollListener(){this.onScroll=this.onScroll.bind(this);window.addEventListener("scroll",this.onScroll)}onResize(force=false){if(IFrameResizer.instance){const newHeight=document.body.scrollHeight;const newWidth=document.body.scrollWidth;if(force||newHeight!==this.lastHeight||newWidth!==this.lastWidth){this.lastHeight=newHeight;this.lastWidth=newWidth;this.sendMessage("resize",{height:newHeight,width:newWidth})}}}onScroll(){if(IFrameResizer.instance){const top=window.scrollY||document.documentElement.scrollTop;const left=window.scrollX||document.documentElement.scrollLeft;this.sendMessage("scroll",{top:top,left:left})}}handleMessage(event){if(this.options.targetOrigin!=="*"&&event.origin!==this.options.targetOrigin){this.log(`Message origin mismatch: expected ${this.options.targetOrigin}, got ${event.origin}`,null,false,true);return}const{type,...data}=event.data;if(!this.customMessageHandlers.has(type)){this.log(`No handler registered for message type: ${type}`,data,false,true);return}if(this.customMessageHandlers.has(type)){const handler=this.customMessageHandlers.get(type);try{handler(data,event);this.log(`Custom message processed: ${type}`,data)}catch(error){this.log(`Error in custom message handler for type: ${type}`,error,true)}}else{this.log(`No handler registered for message type: ${type}`,data,false,true)}}onMessage(type,callback){if(IFrameResizer.instance){if(typeof type==="string"&&typeof callback==="function"){this.customMessageHandlers.set(type,callback);this.log(`Custom message handler registered for type: ${type}`)}else{console.error(`[LOG][IFRAME CHILD]: Invalid handler for message type: ${type}. Callback must be a function.`)}}return this}sendMessage(type,data){if(IFrameResizer.instance){this.log("postMessage",{type:type,...data});window.parent.postMessage({type:type,...data},this.options.targetOrigin)}else{console.error(`[LOG][IFRAME CHILD][${window.location.host}]: IFrameResizer is not initialized. Cannot send message.`)}return this}log(message,data=null,error=false,warn=false){if(this.options.log){if(!error&&!warn){console.log(`[LOG][IFRAME CHILD][${window.location.host}]: ${message}`,data)}else if(error){console.error(`[LOG][IFRAME CHILD][${window.location.host}]: ${message}`,data)}else{console.warn(`[LOG][IFRAME CHILD][${window.location.host}]: ${message}`,data)}}}destroy(){this.log("Destroying IFrameResizer instance");if(this.options.resize){this.observer&&this.observer.unobserve(document.body)}if(this.options.scroll){window.removeEventListener("scroll",this.onScroll)}this.customMessageHandlers.clear();window.removeEventListener("message",this.handleMessage);this.observer=null;this.lastHeight=null;this.lastWidth=null;IFrameResizer.instance=null}static hasParent(){return window.self!==window.top}}